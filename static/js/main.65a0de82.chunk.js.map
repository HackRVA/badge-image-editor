{"version":3,"sources":["Components/Points.js","Components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Points","PointArr","flatten","arr","concat","apply","penUp","push","x","y","pushPoint","point","format","pointArr","splitByAxis","axis","lastX","tmpArr","index","i","length","xPoints","map","yPoints","clean","el","join","undo","pop","getPoints","parsePoints","str","split","replace","stripSquigglies","filter","Number","Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","canvas","refs","ctx","getContext","draw","badgeX","Math","floor","currentX","badgeY","currentY","beginPath","moveTo","previousX","previousY","lineTo","strokeStyle","strokeColor","lineWidth","stroke","closePath","saveData","setState","datapoints","moveMouse","movement","evt","clientX","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","redraw","points","prevX","prevY","clearRect","width","height","pt","currX","currY","handleEditor","e","forEach","state","_this2","react_default","a","createElement","style","textAlign","Grid_default","container","item","xs","display","alignItems","justifyContent","onMouseMove","onMouseDown","onMouseUp","onMouseOut","ref","border","marginTop","Button_default","onClick","variant","color","lib_default","language","theme","value","onChange","React","Component","App","props","Components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65a0de82.chunk.js","sourcesContent":["function Points() {\n    const PointArr = []\n    const penUp = () => PointArr.push({x:-128, y: -128})\n    const flatten = arr => [].concat.apply([], arr)\n    const clean = pointArr => {\n        const splitByAxis = (arr, axis) => {\n            let tmpArr = [[]];\n            let index = 0;\n            let lastX;\n            for(let i = 0; i < arr.length; i++){\n                if(i === 0){\n                    lastX = arr[i][axis]\n                }\n                tmpArr[index] = tmpArr[index] || [];\n                tmpArr[index].push(arr[i])\n                if(arr[i][axis] === lastX){\n                } else {\n                    lastX = arr[i][axis];\n                    index++\n                }\n            }\n            return tmpArr\n        }\n        const xPoints = splitByAxis(pointArr, \"x\").map( x => {\n            if(x.length > 2){\n                return [x[0], x[x.length -1]]\n            }\n            return x\n        })\n        const yPoints = splitByAxis(flatten(xPoints), \"y\").map( x => {\n            if(x.length > 2){\n                return [x[0], x[x.length -1]]\n            }\n            return x\n        })\n        return flatten(yPoints);\n    }\n    const format = () => {\n        return `{\\n${flatten(clean(PointArr)).map(el => `\\t{ ${el.x}, ${el.y} },\\n`).join('')}\\n};`\n    }\n    const pushPoint = point => {\n        PointArr.push(point)\n    }\n    const pop = () => PointArr.pop()\n    const undo = () => {\n        if(!PointArr){\n            return;\n        }\n        if(PointArr.length <= 1){\n            PointArr[0] = { x: -128, y: -128 }\n            return;\n        }\n        pop();\n        if(PointArr[PointArr.length - 1].x === -128 && PointArr[PointArr.length - 1].x === -128 ){\n            return;\n        }\n        undo();\n    }\n    const getPoints = () => PointArr;\n    const parsePoints = str => {\n        const parsed = str.split('\\n').map(x => x.replace(/\\s/g,'')).map(x=> {\n            const stripSquigglies = x.replace(\"{\",\"\").replace(\"}\",\"\").split(\",\").map(x => {\n                return x.split(\",\")\n            })\n            return {\n                x: stripSquigglies[0],\n                y: stripSquigglies[1]\n            }\n        }).filter(x => x.x && x.y).map(x => ({x: Number(x.x[0]), y: Number(x.y[0])}))\n        return parsed;\n    }\n\n    return{\n        penUp,\n        pushPoint,\n        format,\n        undo,\n        getPoints,\n        parsePoints\n    }\n}\n\n\nexport default Points();","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport MonacoEditor from 'react-monaco-editor';\nimport Points from \"./Points\";\n\nclass Editor extends React.Component {\n    constructor() {\n        super()\n        this.canvas = \"\";\n        this.ctx = \"\";\n        this.currentX = 0;\n        this.currentY = 0;\n        this.previousX = 0;\n        this.previousY = 0;\n        this.dot_flag = false;\n        this.flag = false;\n        this.strokeColor = \"black\";\n        this.lineWidth = 3;\n        this.state = {\n            datapoints: \"\"\n        }\n    }\n    componentDidMount = () => {\n        this.canvas = this.refs.canvas\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n    draw = () => {\n        let canvasX = Math.floor(this.currentX/2);\n        let canvasY = Math.floor(this.currentY/2);\n        let badgeX = canvasX - 128;\n        let badgeY = canvasY - 128;\n        Points.pushPoint({x:badgeX, y: badgeY})\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.previousX, this.previousY);\n        this.ctx.lineTo(this.currentX, this.currentY);\n        this.ctx.strokeStyle = this.strokeColor;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    saveData = () => {\n        this.setState({\n            datapoints: Points.format()\n        })\n    }\n    moveMouse = (movement, evt) => {\n        if (movement === \"down\") {\n            this.previousX = this.currentX;\n            this.previousY = this.previousY;\n            this.currentX = evt.clientX - this.canvas.offsetLeft;\n            this.currentY = evt.clientY - this.canvas.offsetTop;\n\n            this.flag = true;\n            this.dot_flag = true;\n\n            if(this.dot_flag){\n                this.ctx.beginPath();\n                this.ctx.fillStyle = this.strokeColor;\n                this.ctx.fillRect(this.currentX, this.currentY, 3, 3);//paintbrush\n                this.ctx.closePath();\n                this.dot_flag = false;\n            }\n        }\n        if (movement === \"up\") {\n            Points.pushPoint({x:-128, y: -128});\n            this.flag = false;\n            this.saveData();\n        }\n        if(movement === \"out\"){\n            this.flag = false;\n        }\n        if (movement === \"move\") {\n            if(this.flag){\n                this.previousX = this.currentX;\n                this.previousY = this.currentY;\n                this.currentX = evt.clientX - this.canvas.offsetLeft;\n                this.currentY = evt.clientY - this.canvas.offsetTop;\n                this.draw();\n            }\n        }\n    }\n    undo = () => {\n        Points.undo();\n        this.redraw(Points.getPoints());\n        this.saveData();\n    }\n    redraw = points => {\n        if (points.length === 0) { return; }\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.strokeStyle = this.strokeColor;\n        this.ctx.lineWidth = this.lineWidth;\n        let prevX, prevY;\n        for (var i = 0; i < points.length; i++) {\n            const pt = {\n                x: (points[i].x + 128) * 2,\n                y: (points[i].y + 128) * 2\n            };\n\n            const {x:currX, y:currY} = pt\n\n            if(currX && currY){\n                this.ctx.beginPath();\n                if(prevX && prevY)\n                    this.ctx.moveTo(prevX, prevY);\n                this.ctx.lineTo(currX, currY);\n            }else{\n            }\n            this.ctx.stroke();\n            prevX = currX\n            prevY = currY\n        }\n    }\n    handleEditor = e => {\n        this.redraw(Points.parsePoints(e));\n        Points.parsePoints(e).forEach(x => Points.pushPoint(x))\n        // this.saveData(Points.parsePoints(e))\n    }\n    render() {\n        const {datapoints} = this.state;\n        return (\n            <div>\n                <h1 style={{ textAlign: 'center' }}>Badge Image Editor</h1>\n                <Grid container>\n                    <Grid item xs={5} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                        <canvas\n                            onMouseMove={(evt) => this.moveMouse(\"move\", evt)}\n                            onMouseDown={(evt) => this.moveMouse(\"down\", evt)}\n                            onMouseUp={(evt) => this.moveMouse(\"up\", evt)}\n                            onMouseOut={(evt) => this.moveMouse(\"out\", evt)}\n                            ref=\"canvas\"\n                            width={512}\n                            height={512}\n                            style={{ border: '3px solid black'}}>\n                        </canvas>\n                    </Grid>\n                    <Grid item xs={2} style={{display: \"flex\", justifyContent: 'center', marginTop:\"15px\"}}>\n                    <Button onClick={this.undo} variant=\"outlined\" color=\"secondary\">\n                            Undo\n                        </Button>\n                        <Button onClick={this.saveData} variant=\"outlined\" color=\"primary\">\n                            Export to text editor\n                        </Button>\n                    </Grid>\n                    <Grid item xs={5} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginTop:\"15px\" }}>\n                        <MonacoEditor\n                            width=\"500\"\n                            height=\"550\"\n                            language=\"cpp\"\n                            theme=\"vs-dark\"\n                            value={datapoints}\n                            onChange={this.handleEditor}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nexport default Editor","import React from 'react';\nimport './App.css';\nimport Editor from './Components/Editor'\nconst App = props => {\n    return (\n        <Editor />\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}